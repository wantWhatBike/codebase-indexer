// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/zgsm-ai/codebase-indexer/internal/dao/model"
)

func newSyncHistory(db *gorm.DB, opts ...gen.DOOption) syncHistory {
	_syncHistory := syncHistory{}

	_syncHistory.syncHistoryDo.UseDB(db, opts...)
	_syncHistory.syncHistoryDo.UseModel(&model.SyncHistory{})

	tableName := _syncHistory.syncHistoryDo.TableName()
	_syncHistory.ALL = field.NewAsterisk(tableName)
	_syncHistory.ID = field.NewInt32(tableName, "id")
	_syncHistory.CodebaseID = field.NewInt32(tableName, "codebase_id")
	_syncHistory.Message = field.NewString(tableName, "message")
	_syncHistory.PublishStatus = field.NewString(tableName, "publish_status")
	_syncHistory.PublishTime = field.NewTime(tableName, "publish_time")
	_syncHistory.CreatedAt = field.NewTime(tableName, "created_at")
	_syncHistory.UpdatedAt = field.NewTime(tableName, "updated_at")

	_syncHistory.fillFieldMap()

	return _syncHistory
}

type syncHistory struct {
	syncHistoryDo syncHistoryDo

	ALL           field.Asterisk
	ID            field.Int32  // Unique identifier for the synchronization history record
	CodebaseID    field.Int32  // ID of the associated project repository
	Message       field.String // Content of the synchronization message
	PublishStatus field.String // Publishing status: pending, success, failed
	PublishTime   field.Time   // Time of publication
	CreatedAt     field.Time   // Time when the record was created
	UpdatedAt     field.Time   // Time when the record was last updated

	fieldMap map[string]field.Expr
}

func (s syncHistory) Table(newTableName string) *syncHistory {
	s.syncHistoryDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s syncHistory) As(alias string) *syncHistory {
	s.syncHistoryDo.DO = *(s.syncHistoryDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *syncHistory) updateTableName(table string) *syncHistory {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt32(table, "id")
	s.CodebaseID = field.NewInt32(table, "codebase_id")
	s.Message = field.NewString(table, "message")
	s.PublishStatus = field.NewString(table, "publish_status")
	s.PublishTime = field.NewTime(table, "publish_time")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")

	s.fillFieldMap()

	return s
}

func (s *syncHistory) WithContext(ctx context.Context) *syncHistoryDo {
	return s.syncHistoryDo.WithContext(ctx)
}

func (s syncHistory) TableName() string { return s.syncHistoryDo.TableName() }

func (s syncHistory) Alias() string { return s.syncHistoryDo.Alias() }

func (s syncHistory) Columns(cols ...field.Expr) gen.Columns { return s.syncHistoryDo.Columns(cols...) }

func (s *syncHistory) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *syncHistory) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 7)
	s.fieldMap["id"] = s.ID
	s.fieldMap["codebase_id"] = s.CodebaseID
	s.fieldMap["message"] = s.Message
	s.fieldMap["publish_status"] = s.PublishStatus
	s.fieldMap["publish_time"] = s.PublishTime
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
}

func (s syncHistory) clone(db *gorm.DB) syncHistory {
	s.syncHistoryDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s syncHistory) replaceDB(db *gorm.DB) syncHistory {
	s.syncHistoryDo.ReplaceDB(db)
	return s
}

type syncHistoryDo struct{ gen.DO }

func (s syncHistoryDo) Debug() *syncHistoryDo {
	return s.withDO(s.DO.Debug())
}

func (s syncHistoryDo) WithContext(ctx context.Context) *syncHistoryDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s syncHistoryDo) ReadDB() *syncHistoryDo {
	return s.Clauses(dbresolver.Read)
}

func (s syncHistoryDo) WriteDB() *syncHistoryDo {
	return s.Clauses(dbresolver.Write)
}

func (s syncHistoryDo) Session(config *gorm.Session) *syncHistoryDo {
	return s.withDO(s.DO.Session(config))
}

func (s syncHistoryDo) Clauses(conds ...clause.Expression) *syncHistoryDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s syncHistoryDo) Returning(value interface{}, columns ...string) *syncHistoryDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s syncHistoryDo) Not(conds ...gen.Condition) *syncHistoryDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s syncHistoryDo) Or(conds ...gen.Condition) *syncHistoryDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s syncHistoryDo) Select(conds ...field.Expr) *syncHistoryDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s syncHistoryDo) Where(conds ...gen.Condition) *syncHistoryDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s syncHistoryDo) Order(conds ...field.Expr) *syncHistoryDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s syncHistoryDo) Distinct(cols ...field.Expr) *syncHistoryDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s syncHistoryDo) Omit(cols ...field.Expr) *syncHistoryDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s syncHistoryDo) Join(table schema.Tabler, on ...field.Expr) *syncHistoryDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s syncHistoryDo) LeftJoin(table schema.Tabler, on ...field.Expr) *syncHistoryDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s syncHistoryDo) RightJoin(table schema.Tabler, on ...field.Expr) *syncHistoryDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s syncHistoryDo) Group(cols ...field.Expr) *syncHistoryDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s syncHistoryDo) Having(conds ...gen.Condition) *syncHistoryDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s syncHistoryDo) Limit(limit int) *syncHistoryDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s syncHistoryDo) Offset(offset int) *syncHistoryDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s syncHistoryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *syncHistoryDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s syncHistoryDo) Unscoped() *syncHistoryDo {
	return s.withDO(s.DO.Unscoped())
}

func (s syncHistoryDo) Create(values ...*model.SyncHistory) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s syncHistoryDo) CreateInBatches(values []*model.SyncHistory, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s syncHistoryDo) Save(values ...*model.SyncHistory) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s syncHistoryDo) First() (*model.SyncHistory, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SyncHistory), nil
	}
}

func (s syncHistoryDo) Take() (*model.SyncHistory, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SyncHistory), nil
	}
}

func (s syncHistoryDo) Last() (*model.SyncHistory, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SyncHistory), nil
	}
}

func (s syncHistoryDo) Find() ([]*model.SyncHistory, error) {
	result, err := s.DO.Find()
	return result.([]*model.SyncHistory), err
}

func (s syncHistoryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SyncHistory, err error) {
	buf := make([]*model.SyncHistory, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s syncHistoryDo) FindInBatches(result *[]*model.SyncHistory, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s syncHistoryDo) Attrs(attrs ...field.AssignExpr) *syncHistoryDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s syncHistoryDo) Assign(attrs ...field.AssignExpr) *syncHistoryDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s syncHistoryDo) Joins(fields ...field.RelationField) *syncHistoryDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s syncHistoryDo) Preload(fields ...field.RelationField) *syncHistoryDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s syncHistoryDo) FirstOrInit() (*model.SyncHistory, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SyncHistory), nil
	}
}

func (s syncHistoryDo) FirstOrCreate() (*model.SyncHistory, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SyncHistory), nil
	}
}

func (s syncHistoryDo) FindByPage(offset int, limit int) (result []*model.SyncHistory, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s syncHistoryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s syncHistoryDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s syncHistoryDo) Delete(models ...*model.SyncHistory) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *syncHistoryDo) withDO(do gen.Dao) *syncHistoryDo {
	s.DO = *do.(*gen.DO)
	return s
}
