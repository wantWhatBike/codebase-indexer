// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/zgsm-ai/codebase-indexer/internal/dao/model"
)

func newIndexHistory(db *gorm.DB, opts ...gen.DOOption) indexHistory {
	_indexHistory := indexHistory{}

	_indexHistory.indexHistoryDo.UseDB(db, opts...)
	_indexHistory.indexHistoryDo.UseModel(&model.IndexHistory{})

	tableName := _indexHistory.indexHistoryDo.TableName()
	_indexHistory.ALL = field.NewAsterisk(tableName)
	_indexHistory.ID = field.NewInt32(tableName, "id")
	_indexHistory.SyncID = field.NewInt32(tableName, "sync_id")
	_indexHistory.CodebaseID = field.NewInt32(tableName, "codebase_id")
	_indexHistory.CodebasePath = field.NewString(tableName, "codebase_path")
	_indexHistory.CodebaseName = field.NewString(tableName, "codebase_name")
	_indexHistory.TotalFileCount = field.NewInt32(tableName, "total_file_count")
	_indexHistory.TotalSuccessCount = field.NewInt32(tableName, "total_success_count")
	_indexHistory.TotalFailCount = field.NewInt32(tableName, "total_fail_count")
	_indexHistory.TotalIgnoreCount = field.NewInt32(tableName, "total_ignore_count")
	_indexHistory.TaskType = field.NewString(tableName, "task_type")
	_indexHistory.Status = field.NewString(tableName, "status")
	_indexHistory.Progress = field.NewFloat64(tableName, "progress")
	_indexHistory.ErrorMessage = field.NewString(tableName, "error_message")
	_indexHistory.StartTime = field.NewTime(tableName, "start_time")
	_indexHistory.EndTime = field.NewTime(tableName, "end_time")
	_indexHistory.CreatedAt = field.NewTime(tableName, "created_at")
	_indexHistory.UpdatedAt = field.NewTime(tableName, "updated_at")

	_indexHistory.fillFieldMap()

	return _indexHistory
}

type indexHistory struct {
	indexHistoryDo indexHistoryDo

	ALL               field.Asterisk
	ID                field.Int32   // Unique identifier for the index task history record
	SyncID            field.Int32   // ID of the associated synchronization history record
	CodebaseID        field.Int32   // ID of the associated project repository
	CodebasePath      field.String  // Path of the project repository
	CodebaseName      field.String  // name of the project repository
	TotalFileCount    field.Int32   // Total number of files
	TotalSuccessCount field.Int32   // Total success number of files
	TotalFailCount    field.Int32   // Total fail number of files
	TotalIgnoreCount  field.Int32   // Total ignore number of files
	TaskType          field.String  // Task type: vector, relation
	Status            field.String  // Task status: pending, running, success, failed
	Progress          field.Float64 // Task progress (floating point number between 0 and 1)
	ErrorMessage      field.String  // Error message if the task failed
	StartTime         field.Time    // Task start time
	EndTime           field.Time    // Task end time
	CreatedAt         field.Time    // Time when the record was created
	UpdatedAt         field.Time    // Time when the record was last updated

	fieldMap map[string]field.Expr
}

func (i indexHistory) Table(newTableName string) *indexHistory {
	i.indexHistoryDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i indexHistory) As(alias string) *indexHistory {
	i.indexHistoryDo.DO = *(i.indexHistoryDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *indexHistory) updateTableName(table string) *indexHistory {
	i.ALL = field.NewAsterisk(table)
	i.ID = field.NewInt32(table, "id")
	i.SyncID = field.NewInt32(table, "sync_id")
	i.CodebaseID = field.NewInt32(table, "codebase_id")
	i.CodebasePath = field.NewString(table, "codebase_path")
	i.CodebaseName = field.NewString(table, "codebase_name")
	i.TotalFileCount = field.NewInt32(table, "total_file_count")
	i.TotalSuccessCount = field.NewInt32(table, "total_success_count")
	i.TotalFailCount = field.NewInt32(table, "total_fail_count")
	i.TotalIgnoreCount = field.NewInt32(table, "total_ignore_count")
	i.TaskType = field.NewString(table, "task_type")
	i.Status = field.NewString(table, "status")
	i.Progress = field.NewFloat64(table, "progress")
	i.ErrorMessage = field.NewString(table, "error_message")
	i.StartTime = field.NewTime(table, "start_time")
	i.EndTime = field.NewTime(table, "end_time")
	i.CreatedAt = field.NewTime(table, "created_at")
	i.UpdatedAt = field.NewTime(table, "updated_at")

	i.fillFieldMap()

	return i
}

func (i *indexHistory) WithContext(ctx context.Context) *indexHistoryDo {
	return i.indexHistoryDo.WithContext(ctx)
}

func (i indexHistory) TableName() string { return i.indexHistoryDo.TableName() }

func (i indexHistory) Alias() string { return i.indexHistoryDo.Alias() }

func (i indexHistory) Columns(cols ...field.Expr) gen.Columns {
	return i.indexHistoryDo.Columns(cols...)
}

func (i *indexHistory) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *indexHistory) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 17)
	i.fieldMap["id"] = i.ID
	i.fieldMap["sync_id"] = i.SyncID
	i.fieldMap["codebase_id"] = i.CodebaseID
	i.fieldMap["codebase_path"] = i.CodebasePath
	i.fieldMap["codebase_name"] = i.CodebaseName
	i.fieldMap["total_file_count"] = i.TotalFileCount
	i.fieldMap["total_success_count"] = i.TotalSuccessCount
	i.fieldMap["total_fail_count"] = i.TotalFailCount
	i.fieldMap["total_ignore_count"] = i.TotalIgnoreCount
	i.fieldMap["task_type"] = i.TaskType
	i.fieldMap["status"] = i.Status
	i.fieldMap["progress"] = i.Progress
	i.fieldMap["error_message"] = i.ErrorMessage
	i.fieldMap["start_time"] = i.StartTime
	i.fieldMap["end_time"] = i.EndTime
	i.fieldMap["created_at"] = i.CreatedAt
	i.fieldMap["updated_at"] = i.UpdatedAt
}

func (i indexHistory) clone(db *gorm.DB) indexHistory {
	i.indexHistoryDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i indexHistory) replaceDB(db *gorm.DB) indexHistory {
	i.indexHistoryDo.ReplaceDB(db)
	return i
}

type indexHistoryDo struct{ gen.DO }

func (i indexHistoryDo) Debug() *indexHistoryDo {
	return i.withDO(i.DO.Debug())
}

func (i indexHistoryDo) WithContext(ctx context.Context) *indexHistoryDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i indexHistoryDo) ReadDB() *indexHistoryDo {
	return i.Clauses(dbresolver.Read)
}

func (i indexHistoryDo) WriteDB() *indexHistoryDo {
	return i.Clauses(dbresolver.Write)
}

func (i indexHistoryDo) Session(config *gorm.Session) *indexHistoryDo {
	return i.withDO(i.DO.Session(config))
}

func (i indexHistoryDo) Clauses(conds ...clause.Expression) *indexHistoryDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i indexHistoryDo) Returning(value interface{}, columns ...string) *indexHistoryDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i indexHistoryDo) Not(conds ...gen.Condition) *indexHistoryDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i indexHistoryDo) Or(conds ...gen.Condition) *indexHistoryDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i indexHistoryDo) Select(conds ...field.Expr) *indexHistoryDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i indexHistoryDo) Where(conds ...gen.Condition) *indexHistoryDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i indexHistoryDo) Order(conds ...field.Expr) *indexHistoryDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i indexHistoryDo) Distinct(cols ...field.Expr) *indexHistoryDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i indexHistoryDo) Omit(cols ...field.Expr) *indexHistoryDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i indexHistoryDo) Join(table schema.Tabler, on ...field.Expr) *indexHistoryDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i indexHistoryDo) LeftJoin(table schema.Tabler, on ...field.Expr) *indexHistoryDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i indexHistoryDo) RightJoin(table schema.Tabler, on ...field.Expr) *indexHistoryDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i indexHistoryDo) Group(cols ...field.Expr) *indexHistoryDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i indexHistoryDo) Having(conds ...gen.Condition) *indexHistoryDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i indexHistoryDo) Limit(limit int) *indexHistoryDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i indexHistoryDo) Offset(offset int) *indexHistoryDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i indexHistoryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *indexHistoryDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i indexHistoryDo) Unscoped() *indexHistoryDo {
	return i.withDO(i.DO.Unscoped())
}

func (i indexHistoryDo) Create(values ...*model.IndexHistory) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i indexHistoryDo) CreateInBatches(values []*model.IndexHistory, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i indexHistoryDo) Save(values ...*model.IndexHistory) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i indexHistoryDo) First() (*model.IndexHistory, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.IndexHistory), nil
	}
}

func (i indexHistoryDo) Take() (*model.IndexHistory, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.IndexHistory), nil
	}
}

func (i indexHistoryDo) Last() (*model.IndexHistory, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.IndexHistory), nil
	}
}

func (i indexHistoryDo) Find() ([]*model.IndexHistory, error) {
	result, err := i.DO.Find()
	return result.([]*model.IndexHistory), err
}

func (i indexHistoryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.IndexHistory, err error) {
	buf := make([]*model.IndexHistory, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i indexHistoryDo) FindInBatches(result *[]*model.IndexHistory, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i indexHistoryDo) Attrs(attrs ...field.AssignExpr) *indexHistoryDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i indexHistoryDo) Assign(attrs ...field.AssignExpr) *indexHistoryDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i indexHistoryDo) Joins(fields ...field.RelationField) *indexHistoryDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i indexHistoryDo) Preload(fields ...field.RelationField) *indexHistoryDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i indexHistoryDo) FirstOrInit() (*model.IndexHistory, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.IndexHistory), nil
	}
}

func (i indexHistoryDo) FirstOrCreate() (*model.IndexHistory, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.IndexHistory), nil
	}
}

func (i indexHistoryDo) FindByPage(offset int, limit int) (result []*model.IndexHistory, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i indexHistoryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i indexHistoryDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i indexHistoryDo) Delete(models ...*model.IndexHistory) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *indexHistoryDo) withDO(do gen.Dao) *indexHistoryDo {
	i.DO = *do.(*gen.DO)
	return i
}
