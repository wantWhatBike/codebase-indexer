// Code generated by MockGen. DO NOT EDIT.
// Source: internal/store/codebase/minio_wrapper.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	minio "github.com/minio/minio-go/v7"
)

// MockMinioClient is a mock of MinioClient interface.
type MockMinioClient struct {
	ctrl     *gomock.Controller
	recorder *MockMinioClientMockRecorder
}

// MockMinioClientMockRecorder is the mock recorder for MockMinioClient.
type MockMinioClientMockRecorder struct {
	mock *MockMinioClient
}

// NewMockMinioClient creates a new mock instance.
func NewMockMinioClient(ctrl *gomock.Controller) *MockMinioClient {
	mock := &MockMinioClient{ctrl: ctrl}
	mock.recorder = &MockMinioClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMinioClient) EXPECT() *MockMinioClientMockRecorder {
	return m.recorder
}

// BucketExists mocks base method.
func (m *MockMinioClient) BucketExists(ctx context.Context, bucketName string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BucketExists", ctx, bucketName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BucketExists indicates an expected call of BucketExists.
func (mr *MockMinioClientMockRecorder) BucketExists(ctx, bucketName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BucketExists", reflect.TypeOf((*MockMinioClient)(nil).BucketExists), ctx, bucketName)
}

// GetObject mocks base method.
func (m *MockMinioClient) GetObject(ctx context.Context, bucketName, objectName string, opts minio.GetObjectOptions) (*minio.Object, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObject", ctx, bucketName, objectName, opts)
	ret0, _ := ret[0].(*minio.Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObject indicates an expected call of GetObject.
func (mr *MockMinioClientMockRecorder) GetObject(ctx, bucketName, objectName, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObject", reflect.TypeOf((*MockMinioClient)(nil).GetObject), ctx, bucketName, objectName, opts)
}

// ListObjects mocks base method.
func (m *MockMinioClient) ListObjects(ctx context.Context, bucketName string, opts minio.ListObjectsOptions) <-chan minio.ObjectInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListObjects", ctx, bucketName, opts)
	ret0, _ := ret[0].(<-chan minio.ObjectInfo)
	return ret0
}

// ListObjects indicates an expected call of ListObjects.
func (mr *MockMinioClientMockRecorder) ListObjects(ctx, bucketName, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListObjects", reflect.TypeOf((*MockMinioClient)(nil).ListObjects), ctx, bucketName, opts)
}

// MakeBucket mocks base method.
func (m *MockMinioClient) MakeBucket(ctx context.Context, bucketName string, opts minio.MakeBucketOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeBucket", ctx, bucketName, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// MakeBucket indicates an expected call of MakeBucket.
func (mr *MockMinioClientMockRecorder) MakeBucket(ctx, bucketName, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeBucket", reflect.TypeOf((*MockMinioClient)(nil).MakeBucket), ctx, bucketName, opts)
}

// PutObject mocks base method.
func (m *MockMinioClient) PutObject(ctx context.Context, bucketName, objectName string, reader io.Reader, size int64, opts minio.PutObjectOptions) (minio.UploadInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutObject", ctx, bucketName, objectName, reader, size, opts)
	ret0, _ := ret[0].(minio.UploadInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutObject indicates an expected call of PutObject.
func (mr *MockMinioClientMockRecorder) PutObject(ctx, bucketName, objectName, reader, size, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutObject", reflect.TypeOf((*MockMinioClient)(nil).PutObject), ctx, bucketName, objectName, reader, size, opts)
}

// RemoveObject mocks base method.
func (m *MockMinioClient) RemoveObject(ctx context.Context, bucketName, objectName string, opts minio.RemoveObjectOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveObject", ctx, bucketName, objectName, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveObject indicates an expected call of RemoveObject.
func (mr *MockMinioClientMockRecorder) RemoveObject(ctx, bucketName, objectName, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveObject", reflect.TypeOf((*MockMinioClient)(nil).RemoveObject), ctx, bucketName, objectName, opts)
}

// RemoveObjects mocks base method.
func (m *MockMinioClient) RemoveObjects(ctx context.Context, bucket string, ch <-chan minio.ObjectInfo, options minio.RemoveObjectsOptions) <-chan minio.RemoveObjectError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveObjects", ctx, bucket, ch, options)
	ret0, _ := ret[0].(<-chan minio.RemoveObjectError)
	return ret0
}

// RemoveObjects indicates an expected call of RemoveObjects.
func (mr *MockMinioClientMockRecorder) RemoveObjects(ctx, bucket, ch, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveObjects", reflect.TypeOf((*MockMinioClient)(nil).RemoveObjects), ctx, bucket, ch, options)
}

// StatObject mocks base method.
func (m *MockMinioClient) StatObject(ctx context.Context, bucketName, objectName string, opts minio.StatObjectOptions) (minio.ObjectInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatObject", ctx, bucketName, objectName, opts)
	ret0, _ := ret[0].(minio.ObjectInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StatObject indicates an expected call of StatObject.
func (mr *MockMinioClientMockRecorder) StatObject(ctx, bucketName, objectName, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatObject", reflect.TypeOf((*MockMinioClient)(nil).StatObject), ctx, bucketName, objectName, opts)
}
