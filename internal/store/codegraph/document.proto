// go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
// protoc --go_out=. internal/store/codegraph/document.proto
syntax = "proto3";

package codegraphpb;
option go_package = "internal/store/codegraph/codegraphpb;codegraphpb";

// RelationType 定义关系类型
enum RelationType {
  RELATION_TYPE_UNKNOWN = 0; // Protobuf enum must start with 0
  RELATION_DEFINITION = 1;
  RELATION_TYPE_DEFINITION = 2;
  RELATION_IMPLEMENTATION = 3;
  RELATION_REFERENCE = 4;
}

// Relation 表示符号在文件中的出现位置（作为关系的终点）
message Relation {
  string name = 1; // 符号名 (符号的唯一标识符，例如 SCIP 符号描述符)
  string filePath = 2; // 文件路径
  repeated int32 range = 3; // 范围信息 [startLine,startCol,endLine,endCol]
  RelationType relationType = 4; // 节点角色 (表示关系的类型，比如这个 Relation 指向的是一个定义、引用等)
}

// Symbol 表示代码库中的一个符号出现（作为图谱的节点）
message Symbol {
  string name = 1; // 符号名 (符号的唯一标识符，例如 SCIP 符号描述符)
  string content = 2; // 符号内容（代码片段）
  // Role 在这里表示这个 Symbol 出现点在该文件中的角色 (比如是定义点、引用点)
  // 假设 types.SymbolRole 可以映射到 Protobuf enum，或者直接使用 RelationType
  // 为了简单和统一，我们在这里复用 RelationType 来表示出现点的角色
  RelationType role = 3;
  repeated int32 range = 4; // [startLine, startCol, endLine, endCol] 这个 Symbol 出现点自身的位置
  repeated Relation relations = 5; // 与这个 Symbol 出现点相关的其他出现点或符号关系
}

// Document 表示代码库中的一个文件
message Document {
  string path = 1; // 文件路径
  repeated Symbol symbols = 2; // 文件中的符号出现列表
}