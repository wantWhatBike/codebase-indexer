// Code generated by MockGen. DO NOT EDIT.
// Source: internal/store/vector/vector_store.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	vector "github.com/zgsm-ai/codebase-indexer/internal/store/vector"
	types "github.com/zgsm-ai/codebase-indexer/internal/types"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockStore) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockStoreMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStore)(nil).Close))
}

// DeleteCodeChunks mocks base method.
func (m *MockStore) DeleteCodeChunks(ctx context.Context, chunks []*types.CodeChunk, options vector.Options) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCodeChunks", ctx, chunks, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCodeChunks indicates an expected call of DeleteCodeChunks.
func (mr *MockStoreMockRecorder) DeleteCodeChunks(ctx, chunks, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCodeChunks", reflect.TypeOf((*MockStore)(nil).DeleteCodeChunks), ctx, chunks, options)
}

// Query mocks base method.
func (m *MockStore) Query(ctx context.Context, query string, topK int, options vector.Options) ([]*types.SemanticFileItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryRelation", ctx, query, topK, options)
	ret0, _ := ret[0].([]*types.SemanticFileItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockStoreMockRecorder) Query(ctx, query, topK, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRelation", reflect.TypeOf((*MockStore)(nil).Query), ctx, query, topK, options)
}

// UpsertCodeChunks mocks base method.
func (m *MockStore) UpsertCodeChunks(ctx context.Context, chunks []*types.CodeChunk, options vector.Options) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertCodeChunks", ctx, chunks, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertCodeChunks indicates an expected call of UpsertCodeChunks.
func (mr *MockStoreMockRecorder) UpsertCodeChunks(ctx, chunks, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertCodeChunks", reflect.TypeOf((*MockStore)(nil).UpsertCodeChunks), ctx, chunks, options)
}
