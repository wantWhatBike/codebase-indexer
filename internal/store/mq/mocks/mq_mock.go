// Code generated by MockGen. DO NOT EDIT.
// Source: internal/store/mq/mq.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/zgsm-ai/codebase-indexer/internal/types"
)

// MockMessageQueue is a mock of MessageQueue interface.
type MockMessageQueue struct {
	ctrl     *gomock.Controller
	recorder *MockMessageQueueMockRecorder
}

// MockMessageQueueMockRecorder is the mock recorder for MockMessageQueue.
type MockMessageQueueMockRecorder struct {
	mock *MockMessageQueue
}

// NewMockMessageQueue creates a new mock instance.
func NewMockMessageQueue(ctrl *gomock.Controller) *MockMessageQueue {
	mock := &MockMessageQueue{ctrl: ctrl}
	mock.recorder = &MockMessageQueueMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageQueue) EXPECT() *MockMessageQueueMockRecorder {
	return m.recorder
}

// Ack mocks base method.
func (m *MockMessageQueue) Ack(ctx context.Context, stream, group, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ack", ctx, stream, group, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ack indicates an expected call of Ack.
func (mr *MockMessageQueueMockRecorder) Ack(ctx, stream, group, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ack", reflect.TypeOf((*MockMessageQueue)(nil).Ack), ctx, stream, group, id)
}

// Consume mocks base method.
func (m *MockMessageQueue) Consume(ctx context.Context, topic string, opts types.ConsumeOptions) (*types.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Consume", ctx, topic, opts)
	ret0, _ := ret[0].(*types.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Consume indicates an expected call of Consume.
func (mr *MockMessageQueueMockRecorder) Consume(ctx, topic, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consume", reflect.TypeOf((*MockMessageQueue)(nil).Consume), ctx, topic, opts)
}

// CreateTopic mocks base method.
func (m *MockMessageQueue) CreateTopic(ctx context.Context, topic string, opts types.TopicOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTopic", ctx, topic, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTopic indicates an expected call of CreateTopic.
func (mr *MockMessageQueueMockRecorder) CreateTopic(ctx, topic, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTopic", reflect.TypeOf((*MockMessageQueue)(nil).CreateTopic), ctx, topic, opts)
}

// DeleteTopic mocks base method.
func (m *MockMessageQueue) DeleteTopic(ctx context.Context, topic string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTopic", ctx, topic)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTopic indicates an expected call of DeleteTopic.
func (mr *MockMessageQueueMockRecorder) DeleteTopic(ctx, topic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTopic", reflect.TypeOf((*MockMessageQueue)(nil).DeleteTopic), ctx, topic)
}

// Nack mocks base method.
func (m *MockMessageQueue) Nack(ctx context.Context, stream, group, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Nack", ctx, stream, group, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Nack indicates an expected call of Nack.
func (mr *MockMessageQueueMockRecorder) Nack(ctx, stream, group, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Nack", reflect.TypeOf((*MockMessageQueue)(nil).Nack), ctx, stream, group, id)
}

// Produce mocks base method.
func (m *MockMessageQueue) Produce(ctx context.Context, topic string, message []byte, opts types.ProduceOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Produce", ctx, topic, message, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Produce indicates an expected call of Produce.
func (mr *MockMessageQueueMockRecorder) Produce(ctx, topic, message, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Produce", reflect.TypeOf((*MockMessageQueue)(nil).Produce), ctx, topic, message, opts)
}
