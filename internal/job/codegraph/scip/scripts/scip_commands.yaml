# SCIP Indexing Commands Configuration (Structured)
# This file defines the commands used to generate SCIP indices for different languages and build tools
# in a structured format for better maintainability and dynamic command construction by the Lua script.

languages:
  - name: typescript
    detection_files: ["package.json"]
    tools:
      - name: scip-typescript
        commands:
          - base: "scip-typescript index"
            args:
              - "--cwd"
              - "__sourcePath__" # Lua script will replace this
              - "--output"
              - "__outputPath__/index.scip" # Lua script will replace this
              - "--infer-tsconfig"

  - name: javascript
    detection_files: ["package.json"] # Can share detection with typescript
    tools:
      - name: scip-typescript # Can use the same tool
        commands:
          - base: "scip-typescript index"
            args:
              - "--cwd"
              - "__sourcePath__"
              - "--output"
              - "__outputPath__/index.scip"
              - "--infer-tsconfig"

  - name: go
    detection_files: ["go.mod"] # go.mod is a strong indicator for Go Modules projects
    tools:
      - name: scip-go
        commands:
          - base: "scip-go index"
            args:
              - " --project-root"
              - "__sourcePath__"
              - "--output"
              - "__outputPath__/index.scip"

  - name: java
    detection_files: ["pom.xml", "build.gradle"] # Primary detection for Java build tools
    build_tools:
      - name: maven
        detection_files: ["pom.xml"]
        priority: 10 # Maven priority (lower number is higher priority)
        build_commands:
          - base: "mvn"
            args: ["verify", "--batch-mode", "--fail-never", "-DskipTests", "--offline", "-T", "8"]
      - name: gradle
        detection_files: ["build.gradle"]
        priority: 20 # Gradle priority
        build_commands:
          - base: "gradle"
            args: ["--offline", "--continue", "--no-tests", "--parallel", "--max-workers", "8", "--no-interactive"]
    tools:
      - name: scip-java
        commands:
          # The {buildCommand} placeholder is specific to scip-java and is replaced by the build tool's command args.
          - base: "scip-java index"
            args:
              - "--cwd"
              - "__sourcePath__"
              - "--targetroot"
              - "__outputPath__/build"
              - "--output"
              - "__outputPath__/index.scip"
              - "--" # Separator for build tool arguments
              - "__buildArgs__" # Lua script will replace this with the substituted build command arguments

  - name: python
    detection_files: ["pyproject.toml", "requirements.txt", "setup.py", "Pipfile", "poetry.lock", "environment.yml"] # Added pyproject.toml and environment.yml
    build_tools: # Optional: Add build tool detection for Python if different tools need different build/install steps
      - name: poetry
        detection_files: ["poetry.lock", "pyproject.toml"]
        priority: 10 # Poetry priority
        build_commands: [] # No explicit build command needed for scip-python in this config
      - name: pipenv
        detection_files: ["Pipfile"]
        priority: 20 # Pipenv priority
        build_commands: [] # No explicit build command needed
      - name: pip
        detection_files: ["requirements.txt"]
        priority: 30 # Pip priority
        build_commands: [] # No explicit build command needed
      # Add other Python package managers if needed
    tools:
      - name: scip-python
        commands:
          - base: "scip-python index"
            args:
              - "--output"
              - "__outputPath__/index.scip"
              - "--cwd"
              - "__sourcePath__"
              - "--project-version"
              - "1" # Example parameter, could be made dynamic if needed

  - name: ruby
    detection_files: ["Gemfile"]
    tools:
      - name: scip-ruby
        commands:
          - base: "scip-ruby"
            args:
              - "--dir"
              - "__sourcePath__"
              - "--max-threads"
              - "32"
              - "--index-file"
              - "__outputPath__/index.scip"
              - "--gem-metadata"
              - "ruby@v0.0.1" # Example version

  - name: dotnet
    detection_files: [".sln", "*.csproj", "*.fsproj", "*.vbproj"] # Added more .NET project files - Note: Glob patterns like *.csproj need file listing or globbing in Lua/Go
    tools:
      - name: scip-dotnet
        commands:
          - base: "scip-dotnet index"
            args:
              - "--output"
              - "__outputPath__/index.scip"
              - "--working-directory"
              - "__sourcePath__"
              - "--skip-dotnet-restore"
              - "True" # Consider if this should be conditional

  - name: c
    detection_files: ["CMakeLists.txt", "configure", "Configure", "Makefile"]
    build_tools:
      - name: cmake
        detection_files: ["CMakeLists.txt"]
        priority: 10 # CMake preferred for C/C++
        build_commands:
          - base: "cmake"
            args:
              - "-B"
              - "build"
              - "-DCMAKE_EXPORT_COMPILE_COMMANDS=ON"
              - "-S"
              - "__sourcePath__"
              - "-B"
              - "__outputPath__/build/"
      - name: make
        detection_files: ["Makefile"]
        priority: 20 # Make second priority
        build_commands:
          - base: "bare"
            args:
              - "--output"
              - "__outputPath__/build/compile_commands.json"
              - "--"
              - "make"
              - "-C"
              - "__sourcePath__"
              - "-j"
              - "$(nproc)"
      - name: autoconf
        detection_files: ["configure", "Configure"]
        priority: 30 # Autoconf last priority
        build_commands:
          # Simplified into a single string command executed by bash -c
          - base: "bash"
            args:
              - "-c"
              - "./configure || ./Configure && bare --output __outputPath__/build/compile_commands.json -- make -C __sourcePath__ -j $(nproc)"
    tools:
      - name: scip-clang
        commands:
          - base: "scip-clang"
            args:
              - "--compdb-path"
              - "__outputPath__/build/compile_commands.json"
              - "--index-output-path"
              - "__outputPath__/index.scip"
              - "-j"
              - "$(nproc)"

  - name: cpp
    detection_files: ["CMakeLists.txt", "configure", "Configure", "Makefile"] # Same detection files as C
    build_tools:
      - name: cmake
        detection_files: ["CMakeLists.txt"]
        priority: 10 # CMake preferred for C/C++
        build_commands:
          - base: "cmake"
            args:
              - "-B"
              - "build"
              - "-DCMAKE_EXPORT_COMPILE_COMMANDS=ON"
              - "-S"
              - "__sourcePath__"
              - "-B"
              - "__outputPath__/build/"
      - name: make
        detection_files: ["Makefile"]
        priority: 20 # Make second priority
        build_commands:
          - base: "bare"
            args:
              - "--output"
              - "__outputPath__/build/compile_commands.json"
              - "--"
              - "make"
              - "-C"
              - "__sourcePath__"
              - "-j"
              - "$(nproc)"
      - name: autoconf
        detection_files: ["configure", "Configure"]
        priority: 30 # Autoconf last priority
        build_commands:
          # Simplified into a single string command executed by bash -c
          - base: "bash"
            args:
              - "-c"
              - "./configure || ./Configure && bare --output __outputPath__/build/compile_commands.json -- make -C __sourcePath__ -j $(nproc)"
    tools:
      - name: scip-clang
        commands:
          - base: "scip-clang"
            args:
              - "--compdb-path"
              - "__outputPath__/build/compile_commands.json"
              - "--index-output-path"
              - "__outputPath__/index.scip"
              - "-j"
              - "$(nproc)"

  - name: rust
    detection_files: ["Cargo.toml"]
    tools:
      - name: scip-rust
        commands:
          - base: "scip-rust index"
            args:
              - "--output"
              - "__outputPath__/index.scip"
              - "--cwd"
              - "__sourcePath__"

# Add more language configurations here following the structure.