// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	codebaseFieldNames          = builder.RawFieldNames(&Codebase{}, true)
	codebaseRows                = strings.Join(codebaseFieldNames, ",")
	codebaseRowsExpectAutoSet   = strings.Join(stringx.Remove(codebaseFieldNames, "id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"), ",")
	codebaseRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(codebaseFieldNames, "id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"))
)

type (
	codebaseModel interface {
		Insert(ctx context.Context, data *Codebase) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Codebase, error)
		FindByClientIdAndPath(ctx context.Context, clientId string, clientPath string) (*Codebase, error)
		FindExpiredCodebase(ctx context.Context, expireDays int) ([]*Codebase, error)
		Update(ctx context.Context, data *Codebase) error
		Delete(ctx context.Context, id int64) error
	}

	defaultCodebaseModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Codebase struct {
		Id            int64          `db:"id"`             // Unique identifier for the codebase repository
		ClientId      string         `db:"client_id"`      // User client identifier, such as MAC address
		UserId        string         `db:"user_id"`        // User identifier, such as email or phone number
		Name          string         `db:"name"`           // Name of the codebase repository
		ClientPath    string         `db:"client_path"`    // Local path of the codebase on the user's machine
		Path          string         `db:"path"`           // Path of the codebase
		Status        string         `db:"status"`         // Status of the codebase
		FileCount     int64          `db:"file_count"`     // Number of files in the codebase
		TotalSize     int64          `db:"total_size"`     // Total size of the codebase (in bytes)
		ExtraMetadata sql.NullString `db:"extra_metadata"` // Additional metadata about the codebase
		CreatedAt     time.Time      `db:"created_at"`     // Time when the record was created
		UpdatedAt     time.Time      `db:"updated_at"`     // Time when the record was last updated
	}
)

func newCodebaseModel(conn sqlx.SqlConn) *defaultCodebaseModel {
	return &defaultCodebaseModel{
		conn:  conn,
		table: `"public"."codebase"`,
	}
}

func (m *defaultCodebaseModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where id = $1", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultCodebaseModel) FindOne(ctx context.Context, id int64) (*Codebase, error) {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", codebaseRows, m.table)
	var resp Codebase
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCodebaseModel) Insert(ctx context.Context, data *Codebase) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5, $6, $7, $8, $9)", m.table, codebaseRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.ClientId, data.UserId, data.Name, data.ClientPath, data.Path, data.Status, data.FileCount, data.TotalSize, data.ExtraMetadata)
	return ret, err
}

func (m *defaultCodebaseModel) Update(ctx context.Context, data *Codebase) error {
	query := fmt.Sprintf("update %s set %s where id = $1", m.table, codebaseRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Id, data.ClientId, data.UserId, data.Name, data.ClientPath, data.Path, data.Status,  data.FileCount, data.TotalSize, data.ExtraMetadata)
	return err
}

func (m *defaultCodebaseModel) FindByClientIdAndPath(ctx context.Context, clientId string, clientPath string) (*Codebase, error) {
	query := fmt.Sprintf("select %s from %s where client_id = $1 and client_path = $2 limit 1", codebaseRows, m.table)
	var resp Codebase
	err := m.conn.QueryRowCtx(ctx, &resp, query, clientId, clientPath)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCodebaseModel) FindExpiredCodebase(ctx context.Context, expireDays int) ([]*Codebase, error) {
	query := fmt.Sprintf("select %s from %s where created_at > ", codebaseRows, m.table)
	var resp []*Codebase
	err := m.conn.QueryRowCtx(ctx, &resp, query, expireDays, CodebaseStatusExpired)
	switch err {
	case nil:
		return resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCodebaseModel) tableName() string {
	return m.table
}
