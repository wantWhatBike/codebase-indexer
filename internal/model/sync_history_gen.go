// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	syncHistoryFieldNames          = builder.RawFieldNames(&SyncHistory{}, true)
	syncHistoryRows                = strings.Join(syncHistoryFieldNames, ",")
	syncHistoryRowsExpectAutoSet   = strings.Join(stringx.Remove(syncHistoryFieldNames, "id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"), ",")
	syncHistoryRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(syncHistoryFieldNames, "id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"))
)

type (
	syncHistoryModel interface {
		Insert(ctx context.Context, data *SyncHistory) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*SyncHistory, error)
		Update(ctx context.Context, data *SyncHistory) error
		Delete(ctx context.Context, id int64) error
	}

	defaultSyncHistoryModel struct {
		conn  sqlx.SqlConn
		table string
	}

	SyncHistory struct {
		Id            int64        `db:"id"`             // Unique identifier for the synchronization history record
		CodebaseId    int64        `db:"codebase_id"`    // ID of the associated codebase repository
		Message       string       `db:"message"`        // Content of the synchronization message
		PublishStatus string       `db:"publish_status"` // Publishing status: pending, success, failed
		PublishTime   sql.NullTime `db:"publish_time"`   // Time of publication
		CreatedAt     time.Time    `db:"created_at"`     // Time when the record was created
		UpdatedAt     time.Time    `db:"updated_at"`     // Time when the record was last updated
	}
)

func newSyncHistoryModel(conn sqlx.SqlConn) *defaultSyncHistoryModel {
	return &defaultSyncHistoryModel{
		conn:  conn,
		table: `"public"."sync_history"`,
	}
}

func (m *defaultSyncHistoryModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where id = $1", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultSyncHistoryModel) FindOne(ctx context.Context, id int64) (*SyncHistory, error) {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", syncHistoryRows, m.table)
	var resp SyncHistory
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSyncHistoryModel) Insert(ctx context.Context, data *SyncHistory) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4)", m.table, syncHistoryRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.CodebaseId, data.Message, data.PublishStatus, data.PublishTime)
	return ret, err
}

func (m *defaultSyncHistoryModel) Update(ctx context.Context, data *SyncHistory) error {
	query := fmt.Sprintf("update %s set %s where id = $1", m.table, syncHistoryRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Id, data.CodebaseId, data.Message, data.PublishStatus, data.PublishTime)
	return err
}

func (m *defaultSyncHistoryModel) tableName() string {
	return m.table
}
