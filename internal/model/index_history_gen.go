// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	indexHistoryFieldNames          = builder.RawFieldNames(&IndexHistory{}, true)
	indexHistoryRows                = strings.Join(indexHistoryFieldNames, ",")
	indexHistoryRowsExpectAutoSet   = strings.Join(stringx.Remove(indexHistoryFieldNames, "id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"), ",")
	indexHistoryRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(indexHistoryFieldNames, "id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"))
)

type (
	indexHistoryModel interface {
		Insert(ctx context.Context, data *IndexHistory) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*IndexHistory, error)
		Update(ctx context.Context, data *IndexHistory) error
		Delete(ctx context.Context, id int64) error
	}

	defaultIndexHistoryModel struct {
		conn  sqlx.SqlConn
		table string
	}

	IndexHistory struct {
		Id                 int64           `db:"id"`                    // Unique identifier for the index task history record
		SyncId             int64           `db:"sync_id"`               // ID of the associated synchronization history record
		CodebaseId         int64           `db:"codebase_id"`           // ID of the associated project repository
		CodebasePath       string          `db:"codebase_path"`         // BasePath of the project repository
		TotalCodeFileCount int64           `db:"total_code_file_count"` // Total number of code files
		TaskType           string          `db:"task_type"`             // Task type: vector, relation
		Status             string          `db:"status"`                // Task status: pending, running, success, failed
		Progress           sql.NullFloat64 `db:"progress"`              // Task progress (floating point number between 0 and 1)
		ErrorMessage       sql.NullString  `db:"error_message"`         // Error message if the task failed
		StartTime          sql.NullTime    `db:"start_time"`            // Task start time
		EndTime            sql.NullTime    `db:"end_time"`              // Task end time
		CreatedAt          time.Time       `db:"created_at"`            // Time when the record was created
		UpdatedAt          time.Time       `db:"updated_at"`            // Time when the record was last updated
	}
)

func newIndexHistoryModel(conn sqlx.SqlConn) *defaultIndexHistoryModel {
	return &defaultIndexHistoryModel{
		conn:  conn,
		table: `"public"."index_history"`,
	}
}

func (m *defaultIndexHistoryModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where id = $1", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultIndexHistoryModel) FindOne(ctx context.Context, id int64) (*IndexHistory, error) {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", indexHistoryRows, m.table)
	var resp IndexHistory
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultIndexHistoryModel) Insert(ctx context.Context, data *IndexHistory) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)", m.table, indexHistoryRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.SyncId, data.CodebaseId, data.CodebasePath, data.TotalCodeFileCount, data.TaskType, data.Status, data.Progress, data.ErrorMessage, data.StartTime, data.EndTime)
	return ret, err
}

func (m *defaultIndexHistoryModel) Update(ctx context.Context, data *IndexHistory) error {
	query := fmt.Sprintf("update %s set %s where id = $1", m.table, indexHistoryRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Id, data.SyncId, data.CodebaseId, data.CodebasePath, data.TotalCodeFileCount, data.TaskType, data.Status, data.Progress, data.ErrorMessage, data.StartTime, data.EndTime)
	return err
}

func (m *defaultIndexHistoryModel) tableName() string {
	return m.table
}
