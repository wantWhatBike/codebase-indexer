// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.3

package types

type ComparisonResponseData struct {
	ProjectTree []ProjectTreeItem `json:"projectTree"` // 项目文件树
}

type FileContentRequest struct {
	ClientId    string `form:"clientId"`                      // 用户机器ID
	ProjectPath string `form:"projectPath"`                   // 项目绝对路径
	FilePath    string `form:"filePath"`                      // 文件相对路径
	StartLine   int    `form:"startLine,optional,default=1"`  // 开始行（默认1）
	EndLine     int    `form:"endLine",optional,default=100"` // 结束行（默认100，-1=全部）
}

type FileUploadRequest struct {
	ClientId      string `form:"clientId"`               // 客户ID
	ProjectPath   string `form:"projectPath"`            // 项目路径
	ProjectName   string `form:"projectName"`            // 项目名称
	ExtraMetadata string `form:"extraMetadata,optional"` // 额外元数据（JSON字符串）
}

type Position struct {
	StartLine   int `json:"startLine"`   // 开始行（从1开始）
	StartColumn int `json:"startColumn"` // 开始列（从1开始）
	EndLine     int `json:"endLine"`     // 结束行（从1开始）
	EndColumn   int `json:"endColumn"`   // 结束列（从1开始）
}

type ProjectComparisonRequest struct {
	ClientId    string `form:"clientId"`    // 客户ID
	ProjectPath string `form:"projectPath"` // 项目路径
}

type ProjectTreeItem struct {
	Path string `json:"path"` // 文件路径
	Hash string `json:"hash"` // 文件哈希值
}

type RelationNode struct {
	Content  string         `json:"content"`  // 代码内容
	NodeType string         `json:"nodeType"` // 节点类型（definition=定义，reference=引用）
	FilePath string         `json:"filePath"` // 文件相对路径
	Position Position       `json:"position"` // 代码位置
	Children []RelationNode `json:"children"` // 子节点（引用关系）
}

type RelationRequest struct {
	ClientId       string `form:"clientId"`                     // 用户机器ID
	ProjectPath    string `form:"projectPath"`                  // 项目绝对路径
	FilePath       string `form:"filePath"`                     // 文件相对路径
	StartLine      int    `form:"startLine"`                    // 开始行
	StartColumn    int    `form:"startColumn"`                  // 开始列
	EndLine        int    `form:"endLine"`                      // 结束行
	EndColumn      int    `form:"endColumn"`                    // 结束列
	SymbolName     string `form:"symbolName,optional"`          // 符号名（可选）
	IncludeContent int    `form:"includeContent,default=0"`     // 是否返回代码内容（1=是，0=否，默认0）
	MaxLayer       int    `form:"maxLayer,optional,default=10"` // 最大层级数（默认10）
}

type RelationResponseData struct {
	List []RelationNode `json:"list"` // 关系树列表
}

type SemanticFileItem struct {
	Content  string  `json:"content"`  // 代码片段
	FilePath string  `json:"filePath"` // 文件相对路径
	Score    float64 `json:"score"`    // 匹配得分
}

type SemanticRequest struct {
	ClientId    string `form:"clientId"`                 // 用户机器ID（如MAC地址）
	ProjectPath string `form:"projectPath"`              // 项目绝对路径
	Query       string `form:"query"`                    // 查询内容
	TopK        int    `form:"topK,optional,default=10"` // 结果返回数量（默认10）
}

type SemanticResponseData struct {
	List []SemanticFileItem `json:"list"` // 检索结果列表
}
