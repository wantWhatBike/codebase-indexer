// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.3

package types

import (
	"io/fs"
	"regexp"
	"time"
)

type ComparisonResponseData struct {
	CodebaseTree []CodebaseTreeItem `json:"codebaseTree"` // 项目文件树
}

type FileContentRequest struct {
	ClientId    string `form:"clientId"`                      // 用户机器ID
	CodebasePath string `form:"codebasePath"`                   // 项目绝对路径
	FilePath    string `form:"filePath"`                      // 文件相对路径
	StartLine   int    `form:"startLine,optional,default=1"`  // 开始行（默认1）
	EndLine     int    `form:"endLine",optional,default=100"` // 结束行（默认100，-1=全部）
}

type FileUploadRequest struct {
	ClientId      string `form:"clientId"`               // 客户ID
	CodebasePath   string `form:"codebasePath"`            // 项目路径
	CodebaseName   string `form:"codebaseName"`            // 项目名称
	ExtraMetadata string `form:"extraMetadata,optional"` // 额外元数据（JSON字符串）
}



type CodebaseComparisonRequest struct {
	ClientId    string `form:"clientId"`    // 客户ID
	CodebasePath string `form:"codebasePath"` // 项目路径
}

type CodebaseTreeItem struct {
	Path string `json:"FullPath"` // 文件路径
	Hash string `json:"hash"` // 文件哈希值
}


type RelationQueryOptions struct {
	ClientId       string `form:"clientId"`                     // 用户机器ID
	CodebasePath    string `form:"codebasePath"`                  // 项目绝对路径
	FilePath       string `form:"filePath"`                     // 文件相对路径
	StartLine      int    `form:"startLine"`                    // 开始行
	StartColumn    int    `form:"startColumn"`                  // 开始列
	EndLine        int    `form:"endLine"`                      // 结束行
	EndColumn      int    `form:"endColumn"`                    // 结束列
	SymbolName     string `form:"symbolName,optional"`          // 符号名（可选）
	IncludeContent int    `form:"includeContent,default=0"`     // 是否返回代码内容（1=是，0=否，默认0）
	MaxLayer       int    `form:"maxLayer,optional,default=10"` // 最大层级数（默认10）
}

type RelationResponseData struct {
	List []*GraphNode `json:"list"` // 关系树列表
}

type SemanticFileItem struct {
	Content  string  `json:"Content"`  // 代码片段
	FilePath string  `json:"filePath"` // 文件相对路径
	Score    float64 `json:"score"`    // 匹配得分
}

type SemanticSearchRequest struct {
	ClientId    string `form:"clientId"`                 // 用户机器ID（如MAC地址）
	CodebasePath string `form:"codebasePath"`              // 项目绝对路径
	Query       string `form:"query"`                    // 查询内容
	TopK        int    `form:"topK,optional,default=10"` // 结果返回数量（默认10）
}

type SemanticSearchResponseData struct {
	List []SemanticFileItem `json:"list"` // 检索结果列表
}

// TreeNode 表示目录树中的一个节点，可以是目录或文件
type TreeNode struct {
	FileInfo
	Children []TreeNode `json:"children,omitempty"` // 子节点（仅目录有）
}

type FileInfo struct {
	Name    string    `json:"Language"`              // 节点名称
	Path    string    `json:"FullPath"`              // 节点路径
	Size    int64     `json:"size,omitempty"`    // 文件大小（仅文件有）
	ModTime time.Time `json:"modTime,omitempty"` // 修改时间（可选）
	IsDir   bool      `json:"IsDir"`             // 是否是目录
	Mode    fs.FileMode
}

// ListOption 定义List方法的可选参数
type ListOption func(*ListOptions)

// ListOptions 包含List方法的可选参数
type ListOptions struct {
	Recursive      bool          // 是否递归列出子目录
	Limit          int          // 返回结果数量限制
	Offset         int          // 结果偏移量
	ExcludePattern *regexp.Regexp // 排除文件的正则表达式
	IncludePattern *regexp.Regexp // 包含文件的正则表达式
}

// TreeOption 定义Tree方法的可选参数
type TreeOption func(*TreeOptions)

// TreeOptions 包含Tree方法的可选参数
type TreeOptions struct {
	MaxDepth       int           // 最大递归深度
	ExcludePattern *regexp.Regexp // 排除文件的正则表达式
	IncludePattern *regexp.Regexp // 包含文件的正则表达式
}

type ReadOptions struct {
	StartLine int
	EndLine   int
}


