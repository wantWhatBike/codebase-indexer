//  goctl api go --api api/codebase-indexer.api --style go_zero  --dir .
syntax = "v1"

type Position {
	startLine   int `json:"startLine"` // 开始行（从1开始）
	startColumn int `json:"startColumn"` // 开始列（从1开始）
	endLine     int `json:"endLine"` // 结束行（从1开始）
	endColumn   int `json:"endColumn"` // 结束列（从1开始）
}

type RelationNode {
	content  string         `json:"content"` // 代码内容
	nodeType string         `json:"nodeType"` // 节点类型（definition=定义，reference=引用）
	filePath string         `json:"filePath"` // 文件相对路径
	position Position       `json:"position"` // 代码位置
	children []RelationNode `json:"children"` // 子节点（引用关系）
}

type RelationRequest {
	clientId       string `form:"clientId"` // 用户机器ID
	projectPath    string `form:"projectPath"` // 项目绝对路径
	filePath       string `form:"filePath"` // 文件相对路径
	startLine      int    `form:"startLine"` // 开始行
	startColumn    int    `form:"startColumn"` // 开始列
	endLine        int    `form:"endLine"` // 结束行
	endColumn      int    `form:"endColumn"` // 结束列
	symbolName     string `form:"symbolName,optional"` // 符号名（可选）
	includeContent int    `form:"includeContent,default=0"` // 是否返回代码内容（1=是，0=否，默认0）
	maxLayer       int    `form:"maxLayer,optional,default=10"` // 最大层级数（默认10）
}

type RelationResponseData {
	list []RelationNode `json:"list"` // 关系树列表
}

@server (
	prefix: /codebase-indexer
)
service codebaseindexer {
	@handler relation
	get /api/v1/relations (RelationRequest) returns (RelationResponseData)
}

// 文件内容请求
type FileContentRequest {
	clientId    string `form:"clientId"` // 用户机器ID
	projectPath string `form:"projectPath"` // 项目绝对路径
	filePath    string `form:"filePath"` // 文件相对路径
	startLine   int    `form:"startLine,optional,default=1"` // 开始行（默认1）
	endLine     int    `form:"endLine",optional,default=100"` // 结束行（默认100，-1=全部）
}

// 文件上传请求
type FileUploadRequest {
	clientId      string `form:"clientId"` // 客户ID
	projectPath   string `form:"projectPath"` // 项目路径
	projectName   string `form:"projectName"` // 项目名称
	extraMetadata string `form:"extraMetadata,optional"` // 额外元数据（JSON字符串）
//    file file `form:"file"`                                                      // 文件
}

// 项目对比请求
type ProjectComparisonRequest {
	clientId    string `form:"clientId"` // 客户ID
	projectPath string `form:"projectPath"` // 项目路径
}

type ProjectTreeItem {
	path string `json:"path"` // 文件路径
	hash string `json:"hash"` // 文件哈希值
}

type ComparisonResponseData {
	projectTree []ProjectTreeItem `json:"projectTree"` // 项目文件树
}

@server (
	prefix: /codebase-indexer
)
service codebaseindexer {
	// 获取文件内容
	@handler getFileContent
	get /api/v1/files/content (FileContentRequest)

	// 文件上传
	@handler uploadFiles
	post /api/v1/files/upload (FileUploadRequest)

	// 项目对比
	@handler compareProjects
	get /api/v1/comparison (ProjectComparisonRequest) returns (ComparisonResponseData)
}

type SemanticRequest {
	clientId    string `form:"clientId"` // 用户机器ID（如MAC地址）
	projectPath string `form:"projectPath"` // 项目绝对路径
	query       string `form:"query"` // 查询内容
	topK        int    `form:"topK,optional,default=10"` // 结果返回数量（默认10）
}

type SemanticFileItem {
	content  string  `json:"content"` // 代码片段
	filePath string  `json:"filePath"` // 文件相对路径
	score    float64 `json:"score"` // 匹配得分
}

type SemanticResponseData {
	list []SemanticFileItem `json:"list"` // 检索结果列表
}

@server (
	prefix: /codebase-indexer
)
service codebaseindexer {
	@handler semantic
	get /api/v1/semantics (SemanticRequest) returns (SemanticResponseData)
}

